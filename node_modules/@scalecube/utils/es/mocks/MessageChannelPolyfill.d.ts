interface IMessagePortPolyfill {
    dispatchEvent: (event: {
        data: any;
    }) => boolean;
    postMessage: (message: any) => void;
    addEventListener: (type: string, listener: any) => void;
    removeEventListener: (type: string, listener: any) => void;
    start: () => void;
    close: () => void;
    startSending: () => void;
    stopSending: () => void;
    otherPort: IMessagePortPolyfill | null;
}
interface IMessageChannelPolyfill {
    port1: IMessagePortPolyfill;
    port2: IMessagePortPolyfill;
}
export declare class MessagePortPolyfill implements IMessagePortPolyfill {
    otherPort: IMessagePortPolyfill | null;
    private onmessage;
    private onmessageerror;
    private onmessageListeners;
    private queue;
    private otherSideStart;
    private whoami;
    constructor(whoami: string);
    dispatchEvent(event: {
        data: any;
    }): boolean;
    postMessage(message: string, ports?: MessagePort[]): void;
    addEventListener(type: string, listener: any): void;
    removeEventListener(type: string, listener: any): void;
    start(): void;
    close(): void;
    startSending(): void;
    stopSending(): void;
}
export declare class MessageChannelPolyfill implements IMessageChannelPolyfill {
    port1: IMessagePortPolyfill;
    port2: IMessagePortPolyfill;
    constructor();
}
/**
 * https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js
 */
declare global {
    interface Window {
        Math: any;
    }
}
export declare function applyMessageChannelPolyfill(): void;
export {};

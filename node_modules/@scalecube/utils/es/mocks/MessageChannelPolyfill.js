// polyfill MessagePort and MessageChannel
export class MessagePortPolyfill {
    constructor(whoami) {
        this.onmessage = null;
        this.onmessageerror = null;
        this.otherPort = null;
        this.onmessageListeners = [];
        this.queue = [];
        this.otherSideStart = false;
        this.whoami = whoami;
    }
    dispatchEvent(event) {
        if (this.onmessage) {
            this.onmessage(event);
        }
        this.onmessageListeners.forEach((listener) => listener(event));
        return true;
    }
    postMessage(message, ports) {
        const event = {
            ports,
            data: message,
        };
        if (!this.otherPort) {
            return;
        }
        if (this.otherSideStart) {
            this.otherPort.dispatchEvent(event);
        }
        else {
            this.queue.push(event);
        }
    }
    addEventListener(type, listener) {
        if (type !== 'message') {
            return;
        }
        if (typeof listener !== 'function' || this.onmessageListeners.indexOf(listener) !== -1) {
            return;
        }
        this.onmessageListeners.push(listener);
    }
    removeEventListener(type, listener) {
        if (type !== 'message') {
            return;
        }
        const index = this.onmessageListeners.indexOf(listener);
        if (index === -1) {
            return;
        }
        this.onmessageListeners.splice(index, 1);
    }
    start() {
        setTimeout(() => this.otherPort && this.otherPort.startSending.apply(this.otherPort, []), 0);
    }
    close() {
        setTimeout(() => this.otherPort && this.otherPort.stopSending.apply(this.otherPort, []), 0);
    }
    startSending() {
        this.otherSideStart = true;
        this.queue.forEach((event) => this.otherPort && this.otherPort.dispatchEvent(event));
    }
    stopSending() {
        this.otherSideStart = false;
        this.queue.length = 0;
    }
}
// tslint:disable-next-line
export class MessageChannelPolyfill {
    constructor() {
        this.port1 = new MessagePortPolyfill('client');
        this.port2 = new MessagePortPolyfill('server');
        this.port1.otherPort = this.port2;
        this.port2.otherPort = this.port1;
    }
}
const globalObj = typeof window !== 'undefined' && window.Math === Math
    ? window
    : typeof self !== 'undefined' && self.Math === Math
        ? self
        : Function('return this')();
export function applyMessageChannelPolyfill() {
    globalObj.MessagePort = MessagePortPolyfill;
    globalObj.MessageChannel = MessageChannelPolyfill;
}
if (!globalObj.MessagePort || !globalObj.MessageChannel) {
    applyMessageChannelPolyfill();
}

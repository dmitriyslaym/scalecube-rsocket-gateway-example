export const assert = (predicate, msg) => {
    if (!predicate) {
        throw new Error(msg);
    }
};
export const isDefined = (val) => typeof val !== 'undefined';
export const assertDefined = (val, msg = 'Expect to be defined') => {
    assert(isDefined(val), msg);
};
export const isString = (val) => typeof val === 'string' || val instanceof String;
export const assertString = (val, msg = 'Expected to be a string') => {
    assert(isDefined(val) && isString(val), msg);
};
export const assertNonEmptyString = (val, msg = 'Expected to be non empty string') => {
    assertString(val, msg);
    assert(val.length > 0, msg);
};
export const isArray = (val) => Array.isArray(val);
export const isNonEmptyArray = (val) => isArray(val) && val.length > 0;
export const assertArray = (val, msg = 'Expected to be an array') => {
    assert(isArray(val), msg);
};
export const asserNotEmptytArray = (val, msg = 'Expected to be an array') => {
    assert(isNonEmptyArray(val), msg);
};
export const isObject = (val) => Object.prototype.toString.call(val) === '[object Object]';
export const assertObject = (val, msg = 'Expected to be an object') => {
    assert(isObject(val), msg);
};
export const assertNonEmptyObject = (val, msg = 'Expected to be non empty object') => {
    assertObject(val, msg);
    assert(Object.keys(val).length > 0, msg);
};
export const isOneOf = (collection, val) => {
    if (isArray(collection)) {
        return collection.includes(val);
    }
    if (isObject(collection)) {
        return Object.values(collection).includes(val);
    }
    return false;
};
export const assertOneOf = (collection, val, msg = 'Expected to be one of the collection elements') => {
    assert(isOneOf(collection, val), msg);
};
export const isFunction = (val) => typeof val === 'function' && !/^class\s/.test(Function.prototype.toString.call(val));
export const isFunctionConstructor = (val) => typeof val === 'function' && /^class\s/.test(Function.prototype.toString.call(val));
export const assertFunction = (val, msg = 'Expected to be a function') => {
    assert(isFunction(val), msg);
};
export const assertClass = (val, msg = 'Expected to be a class') => {
    assert(isFunctionConstructor(val), msg);
};
export const isNumber = (val) => typeof val === 'number' && !isNaN(val);
export const assertNumber = (val, msg = 'Expected to be a number') => {
    assert(isNumber(val), msg);
};

declare type Collection<T> = T[] | {
    [key: string]: T;
};
export declare const assert: (predicate: boolean, msg: string) => void | never;
export declare const isDefined: (val: any) => boolean;
export declare const assertDefined: (val: any, msg?: string) => void;
export declare const isString: (val: any) => boolean;
export declare const assertString: (val: any, msg?: string) => void;
export declare const assertNonEmptyString: (val: any, msg?: string) => void;
export declare const isArray: (val: any) => boolean;
export declare const isNonEmptyArray: (val: any) => boolean;
export declare const assertArray: (val: any, msg?: string) => void;
export declare const asserNotEmptytArray: (val: any, msg?: string) => void;
export declare const isObject: (val: any) => boolean;
export declare const assertObject: (val: any, msg?: string) => void;
export declare const assertNonEmptyObject: (val: any, msg?: string) => void;
export declare const isOneOf: (collection: Collection<any>, val: any) => boolean;
export declare const assertOneOf: (collection: Collection<any>, val: any, msg?: string) => void;
export declare const isFunction: (val: any) => boolean;
export declare const isFunctionConstructor: (val: any) => boolean;
export declare const assertFunction: (val: any, msg?: string) => void;
export declare const assertClass: (val: any, msg?: string) => void;
export declare const isNumber: (val: any) => boolean;
export declare const assertNumber: (val: any, msg?: string) => void;
export {};

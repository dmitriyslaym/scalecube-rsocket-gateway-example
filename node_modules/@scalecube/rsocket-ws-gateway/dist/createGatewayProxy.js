"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGatewayProxy = void 0;
var rxjs_1 = require("rxjs");
var rsocket_websocket_client_1 = __importDefault(require("rsocket-websocket-client"));
var rsocket_core_1 = require("rsocket-core");
var utils_1 = require("@scalecube/utils");
function createGatewayProxy(url, definitions, customRequestResponse, customRequestStream, options) {
    var _this = this;
    var isDefinitionsArray = Array.isArray(definitions);
    var defs;
    if (!isDefinitionsArray) {
        defs = [definitions];
    }
    else {
        defs = definitions;
    }
    var proxies = [];
    var socket;
    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connect(url, options).catch(function (e) {
                        reject(e);
                    })];
                case 1:
                    socket = _a.sent();
                    defs.forEach(function (definition) {
                        var serviceName = definition.serviceName, methods = definition.methods;
                        utils_1.validateServiceDefinition(definition);
                        var proxy = {};
                        Object.keys(methods).forEach(function (method) {
                            var asyncModel = methods[method].asyncModel;
                            var qualifier = utils_1.getQualifier({ serviceName: serviceName, methodName: method });
                            proxy[method] = (function () {
                                switch (asyncModel) {
                                    case 'requestResponse':
                                        return customRequestResponse
                                            ? customRequestResponse(socket, qualifier)
                                            : requestResponse(socket, qualifier);
                                    case 'requestStream':
                                        return customRequestStream ? customRequestStream(socket, qualifier) : requestStream(socket, qualifier);
                                    default:
                                        reject(new Error('Unknown asyncModel'));
                                }
                            })();
                        });
                        proxies.push(proxy);
                    });
                    resolve(isDefinitionsArray ? proxies : proxies[0]);
                    return [2 /*return*/];
            }
        });
    }); });
}
exports.createGatewayProxy = createGatewayProxy;
var connect = function (url, options) {
    if (options === void 0) { options = {}; }
    return new Promise(function (resolve, reject) {
        var client = new rsocket_core_1.RSocketClient({
            serializers: rsocket_core_1.JsonSerializers,
            setup: {
                dataMimeType: 'application/json',
                keepAlive: options.keepAlive || 100000,
                lifetime: options.lifetime || 100000,
                metadataMimeType: 'application/json',
            },
            transport: new rsocket_websocket_client_1.default({ url: url }),
        });
        client.connect().subscribe({
            onComplete: function (socket) {
                // console.log('Connected to ' + url);
                resolve(socket);
            },
            onError: function (error) {
                // console.log('Err', error);
                reject({ message: 'Connection error ' + error.toString() });
            },
        });
    });
};
var requestResponse = function (socket, qualifier) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            socket
                .requestResponse({
                data: {
                    qualifier: qualifier,
                    data: args,
                },
            })
                .subscribe({
                onComplete: function (_a) {
                    var data = _a.data;
                    resolve(data);
                },
                onError: function (e) {
                    reject(e);
                },
            });
        });
    };
};
var requestStream = function (socket, qualifier) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new rxjs_1.Observable(function (observer) {
            var canceled = false;
            var cancel = function () {
                canceled = true;
            };
            socket
                .requestStream({
                data: {
                    qualifier: qualifier,
                    data: args,
                },
            })
                .subscribe({
                onSubscribe: function (subscription) {
                    if (canceled) {
                        subscription.cancel();
                        return;
                    }
                    cancel = subscription.cancel;
                    subscription.request(2147483647);
                },
                onNext: function (_a) {
                    var data = _a.data;
                    observer.next(data);
                },
                onComplete: function () {
                    observer.complete();
                },
                onError: function (e) {
                    observer.error(e);
                },
            });
            return function () { return cancel(); };
        });
    };
};

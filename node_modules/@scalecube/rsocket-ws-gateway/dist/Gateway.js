"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gateway = void 0;
var rsocket_core_1 = require("rsocket-core");
var rsocket_websocket_server_1 = __importDefault(require("rsocket-websocket-server"));
var requestResponse_1 = require("./requestResponse");
var requestStream_1 = require("./requestStream");
var validation_1 = require("./helpers/validation");
var Gateway = /** @class */ (function () {
    function Gateway(opts) {
        this.started = false;
        var port = opts.port;
        this.port = port || 3000;
        this.transport = new rsocket_websocket_server_1.default({ port: this.port });
        var optRequestResponse = opts.requestResponse, optRequestStream = opts.requestStream;
        validation_1.validateCustomHandlers('requestResponse', optRequestResponse);
        validation_1.validateCustomHandlers('requestStream', optRequestStream);
        this.requestResponse = optRequestResponse;
        this.requestStream = optRequestStream;
    }
    Gateway.prototype.start = function (opts) {
        var _this = this;
        if (this.started) {
            this.warn('Gateway is already started');
            return;
        }
        var serviceCall = opts.serviceCall;
        validation_1.validateServiceCall(serviceCall);
        this.server = new rsocket_core_1.RSocketServer({
            serializers: rsocket_core_1.JsonSerializers,
            getRequestHandler: function (socket) {
                return {
                    requestResponse: function (payload) {
                        return requestResponse_1.requestResponse(payload, serviceCall, _this.requestResponse);
                    },
                    requestStream: function (payload) { return requestStream_1.requestStream(payload, serviceCall, _this.requestStream); },
                };
            },
            transport: this.transport,
        });
        this.server.start();
        // console.log('Gateway started on port: ' + this.port);
        this.started = true;
    };
    Gateway.prototype.stop = function () {
        if (!this.started) {
            this.warn('Gateway is already stopped');
            return;
        }
        this.server.stop();
        // console.log('Gateway stopped');
        this.started = false;
    };
    Gateway.prototype.warn = function (message) {
        console.warn(message);
    };
    return Gateway;
}());
exports.Gateway = Gateway;

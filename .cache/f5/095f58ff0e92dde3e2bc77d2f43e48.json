{"id":"node_modules/rsocket-core/build/RSocketFrame.js","dependencies":[{"name":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/package.json","includedInParent":true,"mtime":1605625582835},{"name":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/package.json","includedInParent":true,"mtime":1593079698672},{"name":"fbjs/lib/forEachObject","loc":{"line":37,"column":29},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketFrame.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/fbjs/lib/forEachObject.js"},{"name":"fbjs/lib/sprintf","loc":{"line":39,"column":23},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketFrame.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/fbjs/lib/sprintf.js"}],"generated":{"js":"/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * \n */\n'use strict';\n\n/* eslint-disable max-len, no-bitwise */ Object.defineProperty(\n  exports,\n  '__esModule',\n  {value: true}\n);\nexports.MAX_VERSION = (exports.MAX_TTL = (exports.MAX_STREAM_ID = (exports.MAX_RESUME_LENGTH = (exports.MAX_REQUEST_N = (exports.MAX_REQUEST_COUNT = (exports.MAX_MIME_LENGTH = (exports.MAX_METADATA_LENGTH = (exports.MAX_LIFETIME = (exports.MAX_KEEPALIVE = (exports.MAX_CODE = (exports.FRAME_TYPE_OFFFSET = (exports.FLAGS_MASK = (exports.ERROR_EXPLANATIONS = (exports.ERROR_CODES = (exports.FLAGS = (exports.FRAME_TYPE_NAMES = (exports.FRAME_TYPES = (exports.CONNECTION_STREAM_ID = undefined))))))))))))))))));\nexports.isIgnore = isIgnore;\nexports.isMetadata = isMetadata;\nexports.isComplete = isComplete;\nexports.isNext = isNext;\nexports.isRespond = isRespond;\nexports.isResumeEnable = isResumeEnable;\nexports.isLease = isLease;\nexports.isResumePositionFrameType = isResumePositionFrameType;\nexports.getFrameTypeName = getFrameTypeName;\nexports.createErrorFromFrame = createErrorFromFrame;\nexports.getErrorCodeExplanation = getErrorCodeExplanation;\nexports.printFrame = printFrame;\nvar _forEachObject = require('fbjs/lib/forEachObject');\nvar _forEachObject2 = _interopRequireDefault(_forEachObject);\nvar _sprintf = require('fbjs/lib/sprintf');\nvar _sprintf2 = _interopRequireDefault(_sprintf);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nconst CONNECTION_STREAM_ID = (exports.CONNECTION_STREAM_ID = 0);\nconst FRAME_TYPES = (exports.FRAME_TYPES = {\n  CANCEL: 0x09, // Cancel Request: Cancel outstanding request.\n  ERROR: 0x0b, // Error: Error at connection or application level.\n  EXT: 0x3f, // Extension Header: Used To Extend more frame types as well as extensions.\n  KEEPALIVE: 0x03, // Keepalive: Connection keepalive.\n  LEASE: 0x02, // Lease: Sent by Responder to grant the ability to send requests.\n  METADATA_PUSH: 0x0c, // Metadata: Asynchronous Metadata frame\n  PAYLOAD: 0x0a, // Payload: Payload on a stream. For example, response to a request, or message on a channel.\n  REQUEST_CHANNEL: 0x07, // Request Channel: Request a completable stream in both directions.\n  REQUEST_FNF: 0x05, // Fire And Forget: A single one-way message.\n  REQUEST_N: 0x08, // Request N: Request N more items with Reactive Streams semantics.\n  REQUEST_RESPONSE: 0x04, // Request Response: Request single response.\n  REQUEST_STREAM: 0x06, // Request Stream: Request a completable stream.\n  RESERVED: 0x00, // Reserved\n  RESUME: 0x0d, // Resume: Replaces SETUP for Resuming Operation (optional)\n  RESUME_OK: 0x0e, // Resume OK : Sent in response to a RESUME if resuming operation possible (optional)\n  SETUP: 0x01, // Setup: Sent by client to initiate protocol processing.\n}); // Maps frame type codes to type names\nconst FRAME_TYPE_NAMES = (exports.FRAME_TYPE_NAMES = {});\n(0, _forEachObject2.default)(FRAME_TYPES, (value, name) => {\n  FRAME_TYPE_NAMES[value] = name;\n});\nconst FLAGS = (exports.FLAGS = {\n  COMPLETE: 0x40, // PAYLOAD, REQUEST_CHANNEL: indicates stream completion, if set onComplete will be invoked on receiver.\n  FOLLOWS: 0x80, // (unused)\n  IGNORE: 0x200, // (all): Ignore frame if not understood.\n  LEASE: 0x40, // SETUP: Will honor lease or not.\n  METADATA: 0x100, // (all): must be set if metadata is present in the frame.\n  NEXT: 0x20, // PAYLOAD: indicates data/metadata present, if set onNext will be invoked on receiver.\n  RESPOND: 0x80, // KEEPALIVE: should KEEPALIVE be sent by peer on receipt.\n  RESUME_ENABLE: 0x80, // SETUP: Client requests resume capability if possible. Resume Identification Token present.\n}); // Maps error names to codes\nconst ERROR_CODES = (exports.ERROR_CODES = {\n  APPLICATION_ERROR: 0x00000201,\n  CANCELED: 0x00000203,\n  CONNECTION_CLOSE: 0x00000102,\n  CONNECTION_ERROR: 0x00000101,\n  INVALID: 0x00000204,\n  INVALID_SETUP: 0x00000001,\n  REJECTED: 0x00000202,\n  REJECTED_RESUME: 0x00000004,\n  REJECTED_SETUP: 0x00000003,\n  RESERVED: 0x00000000,\n  RESERVED_EXTENSION: 0xffffffff,\n  UNSUPPORTED_SETUP: 0x00000002,\n}); // Maps error codes to names\nconst ERROR_EXPLANATIONS = (exports.ERROR_EXPLANATIONS = {});\n(0, _forEachObject2.default)(ERROR_CODES, (code, explanation) => {\n  ERROR_EXPLANATIONS[code] = explanation;\n});\nconst FLAGS_MASK = (exports.FLAGS_MASK = 0x3ff); // low 10 bits\nconst FRAME_TYPE_OFFFSET = (exports.FRAME_TYPE_OFFFSET = 10); // frame type is offset 10 bytes within the uint16 containing type + flags\nconst MAX_CODE = (exports.MAX_CODE = 0x7fffffff); // uint31\nconst MAX_KEEPALIVE = (exports.MAX_KEEPALIVE = 0x7fffffff); // uint31\nconst MAX_LIFETIME = (exports.MAX_LIFETIME = 0x7fffffff); // uint31\nconst MAX_METADATA_LENGTH = (exports.MAX_METADATA_LENGTH = 0xffffff); // uint24\nconst MAX_MIME_LENGTH = (exports.MAX_MIME_LENGTH = 0xff); // int8\nconst MAX_REQUEST_COUNT = (exports.MAX_REQUEST_COUNT = 0x7fffffff); // uint31\nconst MAX_REQUEST_N = (exports.MAX_REQUEST_N = 0x7fffffff); // uint31\nconst MAX_RESUME_LENGTH = (exports.MAX_RESUME_LENGTH = 0xffff); // uint16\nconst MAX_STREAM_ID = (exports.MAX_STREAM_ID = 0x7fffffff); // uint31\nconst MAX_TTL = (exports.MAX_TTL = 0x7fffffff); // uint31\nconst MAX_VERSION = (exports.MAX_VERSION = 0xffff); // uint16\n/**\n * Returns true iff the flags have the IGNORE bit set.\n */ function isIgnore(\n  flags\n) {\n  return (flags & FLAGS.IGNORE) === FLAGS.IGNORE;\n}\n/**\n                                                                               * Returns true iff the flags have the METADATA bit set.\n                                                                               */ function isMetadata(\n  flags\n) {\n  return (flags & FLAGS.METADATA) === FLAGS.METADATA;\n}\n/**\n                                                                                                                                                                   * Returns true iff the flags have the COMPLETE bit set.\n                                                                                                                                                                   */ function isComplete(\n  flags\n) {\n  return (flags & FLAGS.COMPLETE) === FLAGS.COMPLETE;\n}\n/**\n                                                                                                                                                                                                                                                       * Returns true iff the flags have the NEXT bit set.\n                                                                                                                                                                                                                                                       */ function isNext(\n  flags\n) {\n  return (flags & FLAGS.NEXT) === FLAGS.NEXT;\n}\n/**\n                                                                                                                                                                                                                                                                                                                               * Returns true iff the flags have the RESPOND bit set.\n                                                                                                                                                                                                                                                                                                                               */ function isRespond(\n  flags\n) {\n  return (flags & FLAGS.RESPOND) === FLAGS.RESPOND;\n}\n/**\n                                                                                                                                                                                                                                                                                                                                                                                                                * Returns true iff the flags have the RESUME_ENABLE bit set.\n                                                                                                                                                                                                                                                                                                                                                                                                                */ function isResumeEnable(\n  flags\n) {\n  return (flags & FLAGS.RESUME_ENABLE) === FLAGS.RESUME_ENABLE;\n}\n/**\neturns true iff the flags have the LEASE bit set.\nfunction isLease(\n  flags\n) {\n  return (flags & FLAGS.LEASE) === FLAGS.LEASE;\n}\n/**\neturns true iff the frame type is counted toward the implied\nclient/server position used for the resumption protocol.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             */ function isResumePositionFrameType(\n  type\n) {\n  return type === FRAME_TYPES.CANCEL ||\n    type === FRAME_TYPES.ERROR ||\n    type === FRAME_TYPES.PAYLOAD ||\n    type === FRAME_TYPES.REQUEST_CHANNEL ||\n    type === FRAME_TYPES.REQUEST_FNF ||\n    type === FRAME_TYPES.REQUEST_RESPONSE ||\n    type === FRAME_TYPES.REQUEST_STREAM ||\n    type === FRAME_TYPES.REQUEST_N;\n}\nfunction getFrameTypeName(type) {\n  const name = FRAME_TYPE_NAMES[type];\n  return name != null ? name : toHex(type);\n}\n/**\nonstructs an Error object given the contents of an error frame. The\n`source` property contains metadata about the error for use in introspecting\nthe error at runtime:\n`error.source.code: number`: the error code returned by the server.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * - `error.source.explanation: string`: human-readable explanation of the code\nthis value is not standardized and may change).\n`error.source.message: string`: the error string returned by the server.\nfunction createErrorFromFrame(\n  frame\n) {\n  const {code, message} = frame;\n  const explanation = getErrorCodeExplanation(code);\n  const error = new Error(\n    (0, _sprintf2.default)(\n      'RSocket error %s (%s): %s. See error `source` property for details.',\n      toHex(code),\n      explanation,\n      message\n    )\n  );\n  error.source = {code, explanation, message};\n  return error;\n}\n/**\niven a RSocket error code, returns a human-readable explanation of that\ncode, following the names used in the protocol specification.\nfunction getErrorCodeExplanation(\n  code\n) {\n  const explanation = ERROR_EXPLANATIONS[code];\n  if (explanation != null) {\n    return explanation;\n  } else if (code <= 0x00300) {\n    return 'RESERVED (PROTOCOL)';\n  } else {\n    return 'RESERVED (APPLICATION)';\n  }\n}\n/**\nretty-prints the frame for debugging purposes, with types, flags, and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * error codes annotated with descriptive names.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */ function printFrame(\n  frame\n) {\n  const obj = Object.assign({}, frame);\n  obj.type = getFrameTypeName(frame.type) + ` (${toHex(frame.type)})`;\n  const flagNames = [];\n  (0, _forEachObject2.default)(FLAGS, (flag, name) => {\n    if ((frame.flags & flag) === flag) {\n      flagNames.push(name);\n    }\n  });\n  if (!flagNames.length) {\n    flagNames.push('NO FLAGS');\n  }\n  obj.flags = flagNames.join(' | ') + ` (${toHex(frame.flags)})`;\n  if (frame.type === FRAME_TYPES.ERROR) {\n    obj.code = getErrorCodeExplanation(frame.code) + ` (${toHex(frame.code)})`;\n  }\n  return JSON.stringify(obj, null, 2);\n}\nfunction toHex(n) {\n  return '0x' + n.toString(16);\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketFrame.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}}],"sources":{"node_modules/rsocket-core/build/RSocketFrame.js":"/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * \n */\n'use strict';\n\n/* eslint-disable max-len, no-bitwise */ Object.defineProperty(\n  exports,\n  '__esModule',\n  {value: true}\n);\nexports.MAX_VERSION = (exports.MAX_TTL = (exports.MAX_STREAM_ID = (exports.MAX_RESUME_LENGTH = (exports.MAX_REQUEST_N = (exports.MAX_REQUEST_COUNT = (exports.MAX_MIME_LENGTH = (exports.MAX_METADATA_LENGTH = (exports.MAX_LIFETIME = (exports.MAX_KEEPALIVE = (exports.MAX_CODE = (exports.FRAME_TYPE_OFFFSET = (exports.FLAGS_MASK = (exports.ERROR_EXPLANATIONS = (exports.ERROR_CODES = (exports.FLAGS = (exports.FRAME_TYPE_NAMES = (exports.FRAME_TYPES = (exports.CONNECTION_STREAM_ID = undefined))))))))))))))))));\nexports.isIgnore = isIgnore;\nexports.isMetadata = isMetadata;\nexports.isComplete = isComplete;\nexports.isNext = isNext;\nexports.isRespond = isRespond;\nexports.isResumeEnable = isResumeEnable;\nexports.isLease = isLease;\nexports.isResumePositionFrameType = isResumePositionFrameType;\nexports.getFrameTypeName = getFrameTypeName;\nexports.createErrorFromFrame = createErrorFromFrame;\nexports.getErrorCodeExplanation = getErrorCodeExplanation;\nexports.printFrame = printFrame;\nvar _forEachObject = require('fbjs/lib/forEachObject');\nvar _forEachObject2 = _interopRequireDefault(_forEachObject);\nvar _sprintf = require('fbjs/lib/sprintf');\nvar _sprintf2 = _interopRequireDefault(_sprintf);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nconst CONNECTION_STREAM_ID = (exports.CONNECTION_STREAM_ID = 0);\nconst FRAME_TYPES = (exports.FRAME_TYPES = {\n  CANCEL: 0x09, // Cancel Request: Cancel outstanding request.\n  ERROR: 0x0b, // Error: Error at connection or application level.\n  EXT: 0x3f, // Extension Header: Used To Extend more frame types as well as extensions.\n  KEEPALIVE: 0x03, // Keepalive: Connection keepalive.\n  LEASE: 0x02, // Lease: Sent by Responder to grant the ability to send requests.\n  METADATA_PUSH: 0x0c, // Metadata: Asynchronous Metadata frame\n  PAYLOAD: 0x0a, // Payload: Payload on a stream. For example, response to a request, or message on a channel.\n  REQUEST_CHANNEL: 0x07, // Request Channel: Request a completable stream in both directions.\n  REQUEST_FNF: 0x05, // Fire And Forget: A single one-way message.\n  REQUEST_N: 0x08, // Request N: Request N more items with Reactive Streams semantics.\n  REQUEST_RESPONSE: 0x04, // Request Response: Request single response.\n  REQUEST_STREAM: 0x06, // Request Stream: Request a completable stream.\n  RESERVED: 0x00, // Reserved\n  RESUME: 0x0d, // Resume: Replaces SETUP for Resuming Operation (optional)\n  RESUME_OK: 0x0e, // Resume OK : Sent in response to a RESUME if resuming operation possible (optional)\n  SETUP: 0x01, // Setup: Sent by client to initiate protocol processing.\n}); // Maps frame type codes to type names\nconst FRAME_TYPE_NAMES = (exports.FRAME_TYPE_NAMES = {});\n(0, _forEachObject2.default)(FRAME_TYPES, (value, name) => {\n  FRAME_TYPE_NAMES[value] = name;\n});\nconst FLAGS = (exports.FLAGS = {\n  COMPLETE: 0x40, // PAYLOAD, REQUEST_CHANNEL: indicates stream completion, if set onComplete will be invoked on receiver.\n  FOLLOWS: 0x80, // (unused)\n  IGNORE: 0x200, // (all): Ignore frame if not understood.\n  LEASE: 0x40, // SETUP: Will honor lease or not.\n  METADATA: 0x100, // (all): must be set if metadata is present in the frame.\n  NEXT: 0x20, // PAYLOAD: indicates data/metadata present, if set onNext will be invoked on receiver.\n  RESPOND: 0x80, // KEEPALIVE: should KEEPALIVE be sent by peer on receipt.\n  RESUME_ENABLE: 0x80, // SETUP: Client requests resume capability if possible. Resume Identification Token present.\n}); // Maps error names to codes\nconst ERROR_CODES = (exports.ERROR_CODES = {\n  APPLICATION_ERROR: 0x00000201,\n  CANCELED: 0x00000203,\n  CONNECTION_CLOSE: 0x00000102,\n  CONNECTION_ERROR: 0x00000101,\n  INVALID: 0x00000204,\n  INVALID_SETUP: 0x00000001,\n  REJECTED: 0x00000202,\n  REJECTED_RESUME: 0x00000004,\n  REJECTED_SETUP: 0x00000003,\n  RESERVED: 0x00000000,\n  RESERVED_EXTENSION: 0xffffffff,\n  UNSUPPORTED_SETUP: 0x00000002,\n}); // Maps error codes to names\nconst ERROR_EXPLANATIONS = (exports.ERROR_EXPLANATIONS = {});\n(0, _forEachObject2.default)(ERROR_CODES, (code, explanation) => {\n  ERROR_EXPLANATIONS[code] = explanation;\n});\nconst FLAGS_MASK = (exports.FLAGS_MASK = 0x3ff); // low 10 bits\nconst FRAME_TYPE_OFFFSET = (exports.FRAME_TYPE_OFFFSET = 10); // frame type is offset 10 bytes within the uint16 containing type + flags\nconst MAX_CODE = (exports.MAX_CODE = 0x7fffffff); // uint31\nconst MAX_KEEPALIVE = (exports.MAX_KEEPALIVE = 0x7fffffff); // uint31\nconst MAX_LIFETIME = (exports.MAX_LIFETIME = 0x7fffffff); // uint31\nconst MAX_METADATA_LENGTH = (exports.MAX_METADATA_LENGTH = 0xffffff); // uint24\nconst MAX_MIME_LENGTH = (exports.MAX_MIME_LENGTH = 0xff); // int8\nconst MAX_REQUEST_COUNT = (exports.MAX_REQUEST_COUNT = 0x7fffffff); // uint31\nconst MAX_REQUEST_N = (exports.MAX_REQUEST_N = 0x7fffffff); // uint31\nconst MAX_RESUME_LENGTH = (exports.MAX_RESUME_LENGTH = 0xffff); // uint16\nconst MAX_STREAM_ID = (exports.MAX_STREAM_ID = 0x7fffffff); // uint31\nconst MAX_TTL = (exports.MAX_TTL = 0x7fffffff); // uint31\nconst MAX_VERSION = (exports.MAX_VERSION = 0xffff); // uint16\n/**\n * Returns true iff the flags have the IGNORE bit set.\n */ function isIgnore(\n  flags\n) {\n  return (flags & FLAGS.IGNORE) === FLAGS.IGNORE;\n}\n/**\n                                                                               * Returns true iff the flags have the METADATA bit set.\n                                                                               */ function isMetadata(\n  flags\n) {\n  return (flags & FLAGS.METADATA) === FLAGS.METADATA;\n}\n/**\n                                                                                                                                                                   * Returns true iff the flags have the COMPLETE bit set.\n                                                                                                                                                                   */ function isComplete(\n  flags\n) {\n  return (flags & FLAGS.COMPLETE) === FLAGS.COMPLETE;\n}\n/**\n                                                                                                                                                                                                                                                       * Returns true iff the flags have the NEXT bit set.\n                                                                                                                                                                                                                                                       */ function isNext(\n  flags\n) {\n  return (flags & FLAGS.NEXT) === FLAGS.NEXT;\n}\n/**\n                                                                                                                                                                                                                                                                                                                               * Returns true iff the flags have the RESPOND bit set.\n                                                                                                                                                                                                                                                                                                                               */ function isRespond(\n  flags\n) {\n  return (flags & FLAGS.RESPOND) === FLAGS.RESPOND;\n}\n/**\n                                                                                                                                                                                                                                                                                                                                                                                                                * Returns true iff the flags have the RESUME_ENABLE bit set.\n                                                                                                                                                                                                                                                                                                                                                                                                                */ function isResumeEnable(\n  flags\n) {\n  return (flags & FLAGS.RESUME_ENABLE) === FLAGS.RESUME_ENABLE;\n}\n/**\neturns true iff the flags have the LEASE bit set.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  */ function isLease(\n  flags\n) {\n  return (flags & FLAGS.LEASE) === FLAGS.LEASE;\n}\n/**\neturns true iff the frame type is counted toward the implied\nclient/server position used for the resumption protocol.\nfunction isResumePositionFrameType(\n  type\n) {\n  return type === FRAME_TYPES.CANCEL ||\n    type === FRAME_TYPES.ERROR ||\n    type === FRAME_TYPES.PAYLOAD ||\n    type === FRAME_TYPES.REQUEST_CHANNEL ||\n    type === FRAME_TYPES.REQUEST_FNF ||\n    type === FRAME_TYPES.REQUEST_RESPONSE ||\n    type === FRAME_TYPES.REQUEST_STREAM ||\n    type === FRAME_TYPES.REQUEST_N;\n}\nfunction getFrameTypeName(type) {\n  const name = FRAME_TYPE_NAMES[type];\n  return name != null ? name : toHex(type);\n}\n/**\nonstructs an Error object given the contents of an error frame. The\n`source` property contains metadata about the error for use in introspecting\nthe error at runtime:\n`error.source.code: number`: the error code returned by the server.\n`error.source.explanation: string`: human-readable explanation of the code\nthis value is not standardized and may change).\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * - `error.source.message: string`: the error string returned by the server.\nfunction createErrorFromFrame(\n  frame\n) {\n  const {code, message} = frame;\n  const explanation = getErrorCodeExplanation(code);\n  const error = new Error(\n    (0, _sprintf2.default)(\n      'RSocket error %s (%s): %s. See error `source` property for details.',\n      toHex(code),\n      explanation,\n      message\n    )\n  );\n  error.source = {code, explanation, message};\n  return error;\n}\n/**\niven a RSocket error code, returns a human-readable explanation of that\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * code, following the names used in the protocol specification.\nfunction getErrorCodeExplanation(\n  code\n) {\n  const explanation = ERROR_EXPLANATIONS[code];\n  if (explanation != null) {\n    return explanation;\n  } else if (code <= 0x00300) {\n    return 'RESERVED (PROTOCOL)';\n  } else {\n    return 'RESERVED (APPLICATION)';\n  }\n}\n/**\nretty-prints the frame for debugging purposes, with types, flags, and\nerror codes annotated with descriptive names.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */ function printFrame(\n  frame\n) {\n  const obj = Object.assign({}, frame);\n  obj.type = getFrameTypeName(frame.type) + ` (${toHex(frame.type)})`;\n  const flagNames = [];\n  (0, _forEachObject2.default)(FLAGS, (flag, name) => {\n    if ((frame.flags & flag) === flag) {\n      flagNames.push(name);\n    }\n  });\n  if (!flagNames.length) {\n    flagNames.push('NO FLAGS');\n  }\n  obj.flags = flagNames.join(' | ') + ` (${toHex(frame.flags)})`;\n  if (frame.type === FRAME_TYPES.ERROR) {\n    obj.code = getErrorCodeExplanation(frame.code) + ` (${toHex(frame.code)})`;\n  }\n  return JSON.stringify(obj, null, 2);\n}\nfunction toHex(n) {\n  return '0x' + n.toString(16);\n}\n"},"lineCount":241}},"error":null,"hash":"b2e9dfe1162139eb5a1e035a970a4198","cacheData":{"env":{}}}
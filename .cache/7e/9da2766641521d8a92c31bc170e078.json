{"id":"node_modules/rsocket-core/build/RSocketMachine.js","dependencies":[{"name":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/package.json","includedInParent":true,"mtime":1605625582835},{"name":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/package.json","includedInParent":true,"mtime":1593079698672},{"name":"rsocket-flowable","loc":{"line":22,"column":31},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketMachine.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-flowable/build/index.js"},{"name":"fbjs/lib/emptyFunction","loc":{"line":23,"column":29},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketMachine.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/fbjs/lib/emptyFunction.js"},{"name":"fbjs/lib/invariant","loc":{"line":25,"column":25},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketMachine.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/fbjs/lib/invariant.js"},{"name":"fbjs/lib/warning","loc":{"line":27,"column":23},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketMachine.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/fbjs/lib/warning.js"},{"name":"./RSocketFrame","loc":{"line":29,"column":28},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketMachine.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketFrame.js"},{"name":"./RSocketSerialization","loc":{"line":30,"column":36},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketMachine.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketSerialization.js"},{"name":"./RSocketLease","loc":{"line":31,"column":28},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketMachine.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketLease.js"}],"generated":{"js":"/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * \n */\n\n'use strict';\nObject.defineProperty(exports, '__esModule', {value: true});\nexports.createServerMachine = createServerMachine;\nexports.createClientMachine = createClientMachine;\nvar _rsocketFlowable = require('rsocket-flowable');\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\nvar _invariant = require('fbjs/lib/invariant');\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _warning = require('fbjs/lib/warning');\nvar _warning2 = _interopRequireDefault(_warning);\nvar _RSocketFrame = require('./RSocketFrame');\nvar _RSocketSerialization = require('./RSocketSerialization');\nvar _RSocketLease = require('./RSocketLease');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nclass ResponderWrapper {\n  constructor(responder) {\n    this._responder = responder || {};\n  }\n  setResponder(responder) {\n    this._responder = responder || {};\n  }\n  fireAndForget(payload) {\n    if (this._responder.fireAndForget) {\n      try {\n        this._responder.fireAndForget(payload);\n      } catch (error) {\n        console.error('fireAndForget threw an exception', error);\n      }\n    }\n  }\n  requestResponse(payload) {\n    let error;\n    if (this._responder.requestResponse) {\n      try {\n        return this._responder.requestResponse(payload);\n      } catch (_error) {\n        console.error('requestResponse threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Single.error(error || new Error('not implemented'));\n  }\n  requestStream(payload) {\n    let error;\n    if (this._responder.requestStream) {\n      try {\n        return this._responder.requestStream(payload);\n      } catch (_error) {\n        console.error('requestStream threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Flowable.error(\n      error || new Error('not implemented')\n    );\n  }\n  requestChannel(payloads) {\n    let error;\n    if (this._responder.requestChannel) {\n      try {\n        return this._responder.requestChannel(payloads);\n      } catch (_error) {\n        console.error('requestChannel threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Flowable.error(\n      error || new Error('not implemented')\n    );\n  }\n  metadataPush(payload) {\n    let error;\n    if (this._responder.metadataPush) {\n      try {\n        return this._responder.metadataPush(payload);\n      } catch (_error) {\n        console.error('metadataPush threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Single.error(error || new Error('not implemented'));\n  }\n}\nfunction createServerMachine(\n  connection,\n  connectionPublisher,\n  serializers,\n  requesterLeaseHandler,\n  responderLeaseHandler\n) {\n  return new RSocketMachineImpl(\n    'SERVER',\n    connection,\n    connectionPublisher,\n    serializers,\n    undefined,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  );\n}\nfunction createClientMachine(\n  connection,\n  connectionPublisher,\n  serializers,\n  requestHandler,\n  requesterLeaseHandler,\n  responderLeaseHandler\n) {\n  return new RSocketMachineImpl(\n    'CLIENT',\n    connection,\n    connectionPublisher,\n    serializers,\n    requestHandler,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  );\n}\n\nclass RSocketMachineImpl {\n  constructor(\n    role,\n    connection,\n    connectionPublisher,\n    serializers,\n    requestHandler,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  ) {\n    this._connectionAvailability = 1.0;\n    this._handleTransportClose = () => {\n      this._handleError(new Error('RSocket: The connection was closed.'));\n    };\n    this._handleError = error => {\n      // Error any open request streams\n      this._receivers.forEach(receiver => {\n        receiver.onError(error);\n      });\n      this._receivers.clear();\n      // Cancel any active subscriptions\n      this._subscriptions.forEach(subscription => {\n        subscription.cancel();\n      });\n      this._subscriptions.clear();\n      this._connectionAvailability = 0.0;\n      this._dispose(\n        this._requesterLeaseHandler,\n        this._responderLeaseSenderDisposable\n      );\n    };\n    this._handleFrame = frame => {\n      const {streamId} = frame;\n      if (streamId === _RSocketFrame.CONNECTION_STREAM_ID) {\n        this._handleConnectionFrame(frame);\n      } else {\n        this._handleStreamFrame(streamId, frame);\n      }\n    };\n    this._connection = connection;\n    this._requesterLeaseHandler = requesterLeaseHandler;\n    this._responderLeaseHandler = responderLeaseHandler;\n    this._nextStreamId = role === 'CLIENT' ? 1 : 2;\n    this._receivers = new Map();\n    this._subscriptions = new Map();\n    this._serializers = serializers ||\n      _RSocketSerialization.IdentitySerializers;\n    this._requestHandler = new ResponderWrapper(requestHandler); // Subscribe to completion/errors before sending anything\n    connectionPublisher({\n      onComplete: this._handleTransportClose,\n      onError: this._handleError,\n      onNext: this._handleFrame,\n      onSubscribe: subscription =>\n        subscription.request(Number.MAX_SAFE_INTEGER),\n    });\n    const responderHandler = this._responderLeaseHandler;\n    if (responderHandler) {\n      this._responderLeaseSenderDisposable = responderHandler.send(\n        this._leaseFrameSender()\n      );\n    } // Cleanup when the connection closes\n    this._connection.connectionStatus().subscribe({\n      onNext: status => {\n        if (status.kind === 'CLOSED') {\n          this._handleTransportClose();\n        } else if (status.kind === 'ERROR') {\n          this._handleError(status.error);\n        }\n      },\n      onSubscribe: subscription =>\n        subscription.request(Number.MAX_SAFE_INTEGER),\n    });\n  }\n  setRequestHandler(requestHandler) {\n    this._requestHandler.setResponder(requestHandler);\n  }\n  close() {\n    this._connection.close();\n  }\n  connectionStatus() {\n    return this._connection.connectionStatus();\n  }\n  availability() {\n    const r = this._requesterLeaseHandler;\n    const requesterAvailability = r ? r.availability() : 1.0;\n    return Math.min(this._connectionAvailability, requesterAvailability);\n  }\n  fireAndForget(payload) {\n    if (this._useLeaseOrError(this._requesterLeaseHandler)) {\n      //todo need to signal error to user provided error handler\n      return;\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    const data = this._serializers.data.serialize(payload.data);\n    const metadata = this._serializers.metadata.serialize(payload.metadata);\n    const frame = {\n      data,\n      flags: payload.metadata !== undefined ? _RSocketFrame.FLAGS.METADATA : 0,\n      metadata,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.REQUEST_FNF,\n    };\n    this._connection.sendOne(frame);\n  }\n  requestResponse(payload) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Single.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    return new _rsocketFlowable.Single(subscriber => {\n      this._receivers.set(streamId, {\n        onComplete: _emptyFunction2.default,\n        onError: error => subscriber.onError(error),\n        onNext: data => subscriber.onComplete(data),\n      });\n      const data = this._serializers.data.serialize(payload.data);\n      const metadata = this._serializers.metadata.serialize(payload.metadata);\n      const frame = {\n        data,\n        flags: payload.metadata !== undefined\n          ? _RSocketFrame.FLAGS.METADATA\n          : 0,\n        metadata,\n        streamId,\n        type: _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE,\n      };\n      this._connection.sendOne(frame);\n      subscriber.onSubscribe(() => {\n        this._receivers.delete(streamId);\n        const cancelFrame = {\n          flags: 0,\n          streamId,\n          type: _RSocketFrame.FRAME_TYPES.CANCEL,\n        };\n        this._connection.sendOne(cancelFrame);\n      });\n    });\n  }\n  requestStream(payload) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Flowable.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    return new _rsocketFlowable.Flowable(\n      subscriber => {\n        this._receivers.set(streamId, subscriber);\n        let initialized = false;\n        subscriber.onSubscribe({\n          cancel: () => {\n            this._receivers.delete(streamId);\n            if (!initialized) {\n              return;\n            }\n            const cancelFrame = {\n              flags: 0,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.CANCEL,\n            };\n            this._connection.sendOne(cancelFrame);\n          },\n          request: n => {\n            if (n > _RSocketFrame.MAX_REQUEST_N) {\n              n = _RSocketFrame.MAX_REQUEST_N;\n            }\n            if (initialized) {\n              const requestNFrame = {\n                flags: 0,\n                requestN: n,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n              };\n              this._connection.sendOne(requestNFrame);\n            } else {\n              initialized = true;\n              const data = this._serializers.data.serialize(payload.data);\n              const metadata = this._serializers.metadata.serialize(\n                payload.metadata\n              );\n              const requestStreamFrame = {\n                data,\n                flags: payload.metadata !== undefined\n                  ? _RSocketFrame.FLAGS.METADATA\n                  : 0,\n                metadata,\n                requestN: n,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.REQUEST_STREAM,\n              };\n              this._connection.sendOne(requestStreamFrame);\n            }\n          },\n        });\n      },\n      _RSocketFrame.MAX_REQUEST_N\n    );\n  }\n  requestChannel(payloads) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Flowable.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    let payloadsSubscribed = false;\n    return new _rsocketFlowable.Flowable(\n      subscriber => {\n        try {\n          this._receivers.set(streamId, subscriber);\n          let initialized = false;\n          subscriber.onSubscribe({\n            cancel: () => {\n              this._receivers.delete(streamId);\n              if (!initialized) {\n                return;\n              }\n              const cancelFrame = {\n                flags: 0,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.CANCEL,\n              };\n              this._connection.sendOne(cancelFrame);\n            },\n            request: n => {\n              if (n > _RSocketFrame.MAX_REQUEST_N) {\n                n = _RSocketFrame.MAX_REQUEST_N;\n              }\n              if (initialized) {\n                const requestNFrame = {\n                  flags: 0,\n                  requestN: n,\n                  streamId,\n                  type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n                };\n                this._connection.sendOne(requestNFrame);\n              } else {\n                if (!payloadsSubscribed) {\n                  payloadsSubscribed = true;\n                  payloads.subscribe({\n                    onComplete: () => {\n                      this._sendStreamComplete(streamId);\n                    },\n                    onError: error => {\n                      this._sendStreamError(streamId, error.message);\n                    }, //Subscriber methods\n                    onNext: payload => {\n                      const data = this._serializers.data.serialize(\n                        payload.data\n                      );\n                      const metadata = this._serializers.metadata.serialize(\n                        payload.metadata\n                      );\n                      if (!initialized) {\n                        initialized = true;\n                        const requestChannelFrame = {\n                          data,\n                          flags: payload.metadata !== undefined\n                            ? _RSocketFrame.FLAGS.METADATA\n                            : 0,\n                          metadata,\n                          requestN: n,\n                          streamId,\n                          type: _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL,\n                        };\n                        this._connection.sendOne(requestChannelFrame);\n                      } else {\n                        const payloadFrame = {\n                          data,\n                          flags: _RSocketFrame.FLAGS.NEXT |\n                            (payload.metadata !== undefined\n                              ? _RSocketFrame.FLAGS.METADATA\n                              : 0),\n                          metadata,\n                          streamId,\n                          type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n                        };\n                        this._connection.sendOne(payloadFrame);\n                      }\n                    },\n                    onSubscribe: subscription => {\n                      this._subscriptions.set(streamId, subscription);\n                      subscription.request(1);\n                    },\n                  });\n                } else {\n                  (0, _warning2.default)(\n                    false,\n                    'RSocketClient: re-entrant call to request n before initial' +\n                      ' channel established.'\n                  );\n                }\n              }\n            },\n          });\n        } catch (err) {\n          console.warn(\n            'Exception while subscribing to channel flowable:' + err\n          );\n        }\n      },\n      _RSocketFrame.MAX_REQUEST_N\n    );\n  }\n  metadataPush(payload) {\n    // TODO #18065331: implement metadataPush\n    throw new Error('metadataPush() is not implemented');\n  }\n  _getNextStreamId(streamIds) {\n    const streamId = this._nextStreamId;\n    do {\n      this._nextStreamId = this._nextStreamId + 2 & _RSocketFrame.MAX_STREAM_ID;\n    } while (this._nextStreamId === 0 || streamIds.has(streamId));\n    return streamId;\n  }\n  _useLeaseOrError(leaseHandler) {\n    if (leaseHandler) {\n      if (!leaseHandler.use()) {\n        return leaseHandler.errorMessage();\n      }\n    }\n  }\n  _leaseFrameSender() {\n    return lease =>\n      this._connection.sendOne({\n        flags: 0,\n        metadata: lease.metadata,\n        requestCount: lease.allowedRequests,\n        streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n        ttl: lease.timeToLiveMillis,\n        type: _RSocketFrame.FRAME_TYPES.LEASE,\n      });\n  }\n  _dispose(...disposables) {\n    disposables.forEach(d => {\n      if (d) {\n        d.dispose();\n      }\n    });\n  }\n  _isRequest(frameType) {\n    switch (frameType) {\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n  /**\nandle the connection closing normally: this is an error for any open streams.\nnandle the transport connection closing abnormally or a connection-level protocol error.\nhandleConnectionError(\n    error\n  ) {\n    this._handleError(error);\n    this._connection.close();\n  }\n  /**\nandle a frame received from the transport client.\nnandle connection frames (stream id === 0).\nhandleConnectionFrame(\n    frame\n  ) {\n    switch (frame.type) {\n      case _RSocketFrame.FRAME_TYPES.ERROR:\n        const error = (0, _RSocketFrame.createErrorFromFrame)(frame);\n        this._handleConnectionError(error);\n        break;\n      case _RSocketFrame.FRAME_TYPES.EXT: // Extensions are not supported\n        break;\n      case _RSocketFrame.FRAME_TYPES.KEEPALIVE:\n        if ((0, _RSocketFrame.isRespond)(frame.flags)) {\n          this._connection.sendOne(\n            Object.assign({}, frame, {\n              flags: frame.flags ^ _RSocketFrame.FLAGS.RESPOND, // eslint-disable-line no-bitwise\n              lastReceivedPosition: 0,\n            })\n          );\n        }\n        break;\n      case _RSocketFrame.FRAME_TYPES.LEASE:\n        const r = this._requesterLeaseHandler;\n        if (r) {\n          r.receive(frame);\n        }\n        break;\n      case _RSocketFrame.FRAME_TYPES.METADATA_PUSH:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n        // TODO #18064706: handle requests from server\n        break;\n      case _RSocketFrame.FRAME_TYPES.RESERVED:\n        // No-op\n        break;\n      case _RSocketFrame.FRAME_TYPES.RESUME:\n      case _RSocketFrame.FRAME_TYPES.RESUME_OK:\n        // TODO #18065016: support resumption\n        break;\n      default:\n        if (false) {\n          console.log(\n            'RSocketClient: Unsupported frame type `%s` on stream `%s`.',\n            (0, _RSocketFrame.getFrameTypeName)(frame.type),\n            _RSocketFrame.CONNECTION_STREAM_ID\n          );\n        }\n        break;\n    }\n  }\n\n  /**\n     * Handle stream-specific frames (stream id !== 0).\n     */\n  _handleStreamFrame(streamId, frame) {\n    if (this._isRequest(frame.type)) {\n      const leaseError = this._useLeaseOrError(this._responderLeaseHandler);\n      if (leaseError) {\n        this._sendStreamError(streamId, leaseError);\n        return;\n      }\n    }\n    switch (frame.type) {\n      case _RSocketFrame.FRAME_TYPES.CANCEL:\n        this._handleCancel(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_N:\n        this._handleRequestN(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n        this._handleFireAndForget(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n        this._handleRequestResponse(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n        this._handleRequestStream(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n        this._handleRequestChannel(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.ERROR:\n        const error = (0, _RSocketFrame.createErrorFromFrame)(frame);\n        this._handleStreamError(streamId, error);\n        break;\n      case _RSocketFrame.FRAME_TYPES.PAYLOAD:\n        const receiver = this._receivers.get(streamId);\n        if (receiver != null) {\n          if ((0, _RSocketFrame.isNext)(frame.flags)) {\n            const payload = {\n              data: this._serializers.data.deserialize(frame.data),\n              metadata: this._serializers.metadata.deserialize(frame.metadata),\n            };\n\n            receiver.onNext(payload);\n          }\n          if ((0, _RSocketFrame.isComplete)(frame.flags)) {\n            this._receivers.delete(streamId);\n            receiver.onComplete();\n          }\n        }\n        break;\n      default:\n        if (false) {\n          console.log(\n            'RSocketClient: Unsupported frame type `%s` on stream `%s`.',\n            (0, _RSocketFrame.getFrameTypeName)(frame.type),\n            streamId\n          );\n        }\n        break;\n    }\n  }\n\n  _handleCancel(streamId, frame) {\n    const subscription = this._subscriptions.get(streamId);\n    if (subscription) {\n      subscription.cancel();\n      this._subscriptions.delete(streamId);\n    }\n  }\n\n  _handleRequestN(streamId, frame) {\n    const subscription = this._subscriptions.get(streamId);\n    if (subscription) {\n      subscription.request(frame.requestN);\n    }\n  }\n\n  _handleFireAndForget(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.fireAndForget(payload);\n  }\n\n  _handleRequestResponse(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.requestResponse(payload).subscribe({\n      onComplete: payload => {\n        this._sendStreamPayload(streamId, payload, true);\n      },\n      onError: error => this._sendStreamError(streamId, error.message),\n      onSubscribe: cancel => {\n        const subscription = {\n          cancel,\n          request: _emptyFunction2.default,\n        };\n\n        this._subscriptions.set(streamId, subscription);\n      },\n    });\n  }\n\n  _handleRequestStream(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.requestStream(payload).subscribe({\n      onComplete: () => this._sendStreamComplete(streamId),\n      onError: error => this._sendStreamError(streamId, error.message),\n      onNext: payload => this._sendStreamPayload(streamId, payload),\n      onSubscribe: subscription => {\n        this._subscriptions.set(streamId, subscription);\n        subscription.request(frame.requestN);\n      },\n    });\n  }\n\n  _handleRequestChannel(streamId, frame) {\n    const existingSubscription = this._subscriptions.get(streamId);\n    if (existingSubscription) {\n      //Likely a duplicate REQUEST_CHANNEL frame, ignore per spec\n      return;\n    }\n\n    const payloads = new _rsocketFlowable.Flowable(\n      subscriber => {\n        let firstRequest = true;\n\n        subscriber.onSubscribe({\n          cancel: () => {\n            this._receivers.delete(streamId);\n            const cancelFrame = {\n              flags: 0,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.CANCEL,\n            };\n\n            this._connection.sendOne(cancelFrame);\n          },\n          request: n => {\n            if (n > _RSocketFrame.MAX_REQUEST_N) {\n              n = _RSocketFrame.MAX_REQUEST_N;\n            }\n            if (firstRequest) {\n              n--;\n            }\n\n            if (n > 0) {\n              const requestNFrame = {\n                flags: 0,\n                requestN: n,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n              };\n\n              this._connection.sendOne(requestNFrame);\n            }\n            //critically, if n is 0 now, that's okay because we eagerly decremented it\n            if (firstRequest && n >= 0) {\n              firstRequest = false;\n              //release the initial frame we received in frame form due to map operator\n              subscriber.onNext(frame);\n            }\n          },\n        });\n      },\n      _RSocketFrame.MAX_REQUEST_N\n    );\n\n    const framesToPayloads = new _rsocketFlowable.FlowableProcessor(\n      payloads,\n      frame => this._deserializePayload(frame)\n    );\n    this._receivers.set(streamId, framesToPayloads);\n\n    this._requestHandler.requestChannel(framesToPayloads).subscribe({\n      onComplete: () => this._sendStreamComplete(streamId),\n      onError: error => this._sendStreamError(streamId, error.message),\n      onNext: payload => this._sendStreamPayload(streamId, payload),\n      onSubscribe: subscription => {\n        this._subscriptions.set(streamId, subscription);\n        subscription.request(frame.requestN);\n      },\n    });\n  }\n\n  _sendStreamComplete(streamId) {\n    this._subscriptions.delete(streamId);\n    this._connection.sendOne({\n      data: null,\n      flags: _RSocketFrame.FLAGS.COMPLETE,\n      metadata: null,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n    });\n  }\n\n  _sendStreamError(streamId, errorMessage) {\n    this._subscriptions.delete(streamId);\n    this._connection.sendOne({\n      code: _RSocketFrame.ERROR_CODES.APPLICATION_ERROR,\n      flags: 0,\n      message: errorMessage,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.ERROR,\n    });\n  }\n\n  _sendStreamPayload(streamId, payload, complete = false) {\n    let flags = _RSocketFrame.FLAGS.NEXT;\n    if (complete) {\n      // eslint-disable-next-line no-bitwise\n      flags |= _RSocketFrame.FLAGS.COMPLETE;\n      this._subscriptions.delete(streamId);\n    }\n    const data = this._serializers.data.serialize(payload.data);\n    const metadata = this._serializers.metadata.serialize(payload.metadata);\n    this._connection.sendOne({\n      data,\n      flags,\n      metadata,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n    });\n  }\n\n  _deserializePayload(frame) {\n    return deserializePayload(this._serializers, frame);\n  }\n\n  /**\n     * Handle an error specific to a stream.\n     */\n  _handleStreamError(streamId, error) {\n    const receiver = this._receivers.get(streamId);\n    if (receiver != null) {\n      this._receivers.delete(streamId);\n      receiver.onError(error);\n    }\n  }\n}\n\nfunction deserializePayload(serializers, frame) {\n  return {\n    data: serializers.data.deserialize(frame.data),\n    metadata: serializers.metadata.deserialize(frame.metadata),\n  };\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketMachine.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}}],"sources":{"node_modules/rsocket-core/build/RSocketMachine.js":"/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * \n */\n\n'use strict';\nObject.defineProperty(exports, '__esModule', {value: true});\nexports.createServerMachine = createServerMachine;\nexports.createClientMachine = createClientMachine;\nvar _rsocketFlowable = require('rsocket-flowable');\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\nvar _invariant = require('fbjs/lib/invariant');\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _warning = require('fbjs/lib/warning');\nvar _warning2 = _interopRequireDefault(_warning);\nvar _RSocketFrame = require('./RSocketFrame');\nvar _RSocketSerialization = require('./RSocketSerialization');\nvar _RSocketLease = require('./RSocketLease');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nclass ResponderWrapper {\n  constructor(responder) {\n    this._responder = responder || {};\n  }\n  setResponder(responder) {\n    this._responder = responder || {};\n  }\n  fireAndForget(payload) {\n    if (this._responder.fireAndForget) {\n      try {\n        this._responder.fireAndForget(payload);\n      } catch (error) {\n        console.error('fireAndForget threw an exception', error);\n      }\n    }\n  }\n  requestResponse(payload) {\n    let error;\n    if (this._responder.requestResponse) {\n      try {\n        return this._responder.requestResponse(payload);\n      } catch (_error) {\n        console.error('requestResponse threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Single.error(error || new Error('not implemented'));\n  }\n  requestStream(payload) {\n    let error;\n    if (this._responder.requestStream) {\n      try {\n        return this._responder.requestStream(payload);\n      } catch (_error) {\n        console.error('requestStream threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Flowable.error(\n      error || new Error('not implemented')\n    );\n  }\n  requestChannel(payloads) {\n    let error;\n    if (this._responder.requestChannel) {\n      try {\n        return this._responder.requestChannel(payloads);\n      } catch (_error) {\n        console.error('requestChannel threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Flowable.error(\n      error || new Error('not implemented')\n    );\n  }\n  metadataPush(payload) {\n    let error;\n    if (this._responder.metadataPush) {\n      try {\n        return this._responder.metadataPush(payload);\n      } catch (_error) {\n        console.error('metadataPush threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Single.error(error || new Error('not implemented'));\n  }\n}\nfunction createServerMachine(\n  connection,\n  connectionPublisher,\n  serializers,\n  requesterLeaseHandler,\n  responderLeaseHandler\n) {\n  return new RSocketMachineImpl(\n    'SERVER',\n    connection,\n    connectionPublisher,\n    serializers,\n    undefined,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  );\n}\nfunction createClientMachine(\n  connection,\n  connectionPublisher,\n  serializers,\n  requestHandler,\n  requesterLeaseHandler,\n  responderLeaseHandler\n) {\n  return new RSocketMachineImpl(\n    'CLIENT',\n    connection,\n    connectionPublisher,\n    serializers,\n    requestHandler,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  );\n}\n\nclass RSocketMachineImpl {\n  constructor(\n    role,\n    connection,\n    connectionPublisher,\n    serializers,\n    requestHandler,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  ) {\n    this._connectionAvailability = 1.0;\n    this._handleTransportClose = () => {\n      this._handleError(new Error('RSocket: The connection was closed.'));\n    };\n    this._handleError = error => {\n      // Error any open request streams\n      this._receivers.forEach(receiver => {\n        receiver.onError(error);\n      });\n      this._receivers.clear();\n      // Cancel any active subscriptions\n      this._subscriptions.forEach(subscription => {\n        subscription.cancel();\n      });\n      this._subscriptions.clear();\n      this._connectionAvailability = 0.0;\n      this._dispose(\n        this._requesterLeaseHandler,\n        this._responderLeaseSenderDisposable\n      );\n    };\n    this._handleFrame = frame => {\n      const {streamId} = frame;\n      if (streamId === _RSocketFrame.CONNECTION_STREAM_ID) {\n        this._handleConnectionFrame(frame);\n      } else {\n        this._handleStreamFrame(streamId, frame);\n      }\n    };\n    this._connection = connection;\n    this._requesterLeaseHandler = requesterLeaseHandler;\n    this._responderLeaseHandler = responderLeaseHandler;\n    this._nextStreamId = role === 'CLIENT' ? 1 : 2;\n    this._receivers = new Map();\n    this._subscriptions = new Map();\n    this._serializers = serializers ||\n      _RSocketSerialization.IdentitySerializers;\n    this._requestHandler = new ResponderWrapper(requestHandler); // Subscribe to completion/errors before sending anything\n    connectionPublisher({\n      onComplete: this._handleTransportClose,\n      onError: this._handleError,\n      onNext: this._handleFrame,\n      onSubscribe: subscription =>\n        subscription.request(Number.MAX_SAFE_INTEGER),\n    });\n    const responderHandler = this._responderLeaseHandler;\n    if (responderHandler) {\n      this._responderLeaseSenderDisposable = responderHandler.send(\n        this._leaseFrameSender()\n      );\n    } // Cleanup when the connection closes\n    this._connection.connectionStatus().subscribe({\n      onNext: status => {\n        if (status.kind === 'CLOSED') {\n          this._handleTransportClose();\n        } else if (status.kind === 'ERROR') {\n          this._handleError(status.error);\n        }\n      },\n      onSubscribe: subscription =>\n        subscription.request(Number.MAX_SAFE_INTEGER),\n    });\n  }\n  setRequestHandler(requestHandler) {\n    this._requestHandler.setResponder(requestHandler);\n  }\n  close() {\n    this._connection.close();\n  }\n  connectionStatus() {\n    return this._connection.connectionStatus();\n  }\n  availability() {\n    const r = this._requesterLeaseHandler;\n    const requesterAvailability = r ? r.availability() : 1.0;\n    return Math.min(this._connectionAvailability, requesterAvailability);\n  }\n  fireAndForget(payload) {\n    if (this._useLeaseOrError(this._requesterLeaseHandler)) {\n      //todo need to signal error to user provided error handler\n      return;\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    const data = this._serializers.data.serialize(payload.data);\n    const metadata = this._serializers.metadata.serialize(payload.metadata);\n    const frame = {\n      data,\n      flags: payload.metadata !== undefined ? _RSocketFrame.FLAGS.METADATA : 0,\n      metadata,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.REQUEST_FNF,\n    };\n    this._connection.sendOne(frame);\n  }\n  requestResponse(payload) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Single.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    return new _rsocketFlowable.Single(subscriber => {\n      this._receivers.set(streamId, {\n        onComplete: _emptyFunction2.default,\n        onError: error => subscriber.onError(error),\n        onNext: data => subscriber.onComplete(data),\n      });\n      const data = this._serializers.data.serialize(payload.data);\n      const metadata = this._serializers.metadata.serialize(payload.metadata);\n      const frame = {\n        data,\n        flags: payload.metadata !== undefined\n          ? _RSocketFrame.FLAGS.METADATA\n          : 0,\n        metadata,\n        streamId,\n        type: _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE,\n      };\n      this._connection.sendOne(frame);\n      subscriber.onSubscribe(() => {\n        this._receivers.delete(streamId);\n        const cancelFrame = {\n          flags: 0,\n          streamId,\n          type: _RSocketFrame.FRAME_TYPES.CANCEL,\n        };\n        this._connection.sendOne(cancelFrame);\n      });\n    });\n  }\n  requestStream(payload) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Flowable.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    return new _rsocketFlowable.Flowable(\n      subscriber => {\n        this._receivers.set(streamId, subscriber);\n        let initialized = false;\n        subscriber.onSubscribe({\n          cancel: () => {\n            this._receivers.delete(streamId);\n            if (!initialized) {\n              return;\n            }\n            const cancelFrame = {\n              flags: 0,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.CANCEL,\n            };\n            this._connection.sendOne(cancelFrame);\n          },\n          request: n => {\n            if (n > _RSocketFrame.MAX_REQUEST_N) {\n              n = _RSocketFrame.MAX_REQUEST_N;\n            }\n            if (initialized) {\n              const requestNFrame = {\n                flags: 0,\n                requestN: n,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n              };\n              this._connection.sendOne(requestNFrame);\n            } else {\n              initialized = true;\n              const data = this._serializers.data.serialize(payload.data);\n              const metadata = this._serializers.metadata.serialize(\n                payload.metadata\n              );\n              const requestStreamFrame = {\n                data,\n                flags: payload.metadata !== undefined\n                  ? _RSocketFrame.FLAGS.METADATA\n                  : 0,\n                metadata,\n                requestN: n,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.REQUEST_STREAM,\n              };\n              this._connection.sendOne(requestStreamFrame);\n            }\n          },\n        });\n      },\n      _RSocketFrame.MAX_REQUEST_N\n    );\n  }\n  requestChannel(payloads) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Flowable.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    let payloadsSubscribed = false;\n    return new _rsocketFlowable.Flowable(\n      subscriber => {\n        try {\n          this._receivers.set(streamId, subscriber);\n          let initialized = false;\n          subscriber.onSubscribe({\n            cancel: () => {\n              this._receivers.delete(streamId);\n              if (!initialized) {\n                return;\n              }\n              const cancelFrame = {\n                flags: 0,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.CANCEL,\n              };\n              this._connection.sendOne(cancelFrame);\n            },\n            request: n => {\n              if (n > _RSocketFrame.MAX_REQUEST_N) {\n                n = _RSocketFrame.MAX_REQUEST_N;\n              }\n              if (initialized) {\n                const requestNFrame = {\n                  flags: 0,\n                  requestN: n,\n                  streamId,\n                  type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n                };\n                this._connection.sendOne(requestNFrame);\n              } else {\n                if (!payloadsSubscribed) {\n                  payloadsSubscribed = true;\n                  payloads.subscribe({\n                    onComplete: () => {\n                      this._sendStreamComplete(streamId);\n                    },\n                    onError: error => {\n                      this._sendStreamError(streamId, error.message);\n                    }, //Subscriber methods\n                    onNext: payload => {\n                      const data = this._serializers.data.serialize(\n                        payload.data\n                      );\n                      const metadata = this._serializers.metadata.serialize(\n                        payload.metadata\n                      );\n                      if (!initialized) {\n                        initialized = true;\n                        const requestChannelFrame = {\n                          data,\n                          flags: payload.metadata !== undefined\n                            ? _RSocketFrame.FLAGS.METADATA\n                            : 0,\n                          metadata,\n                          requestN: n,\n                          streamId,\n                          type: _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL,\n                        };\n                        this._connection.sendOne(requestChannelFrame);\n                      } else {\n                        const payloadFrame = {\n                          data,\n                          flags: _RSocketFrame.FLAGS.NEXT |\n                            (payload.metadata !== undefined\n                              ? _RSocketFrame.FLAGS.METADATA\n                              : 0),\n                          metadata,\n                          streamId,\n                          type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n                        };\n                        this._connection.sendOne(payloadFrame);\n                      }\n                    },\n                    onSubscribe: subscription => {\n                      this._subscriptions.set(streamId, subscription);\n                      subscription.request(1);\n                    },\n                  });\n                } else {\n                  (0, _warning2.default)(\n                    false,\n                    'RSocketClient: re-entrant call to request n before initial' +\n                      ' channel established.'\n                  );\n                }\n              }\n            },\n          });\n        } catch (err) {\n          console.warn(\n            'Exception while subscribing to channel flowable:' + err\n          );\n        }\n      },\n      _RSocketFrame.MAX_REQUEST_N\n    );\n  }\n  metadataPush(payload) {\n    // TODO #18065331: implement metadataPush\n    throw new Error('metadataPush() is not implemented');\n  }\n  _getNextStreamId(streamIds) {\n    const streamId = this._nextStreamId;\n    do {\n      this._nextStreamId = this._nextStreamId + 2 & _RSocketFrame.MAX_STREAM_ID;\n    } while (this._nextStreamId === 0 || streamIds.has(streamId));\n    return streamId;\n  }\n  _useLeaseOrError(leaseHandler) {\n    if (leaseHandler) {\n      if (!leaseHandler.use()) {\n        return leaseHandler.errorMessage();\n      }\n    }\n  }\n  _leaseFrameSender() {\n    return lease =>\n      this._connection.sendOne({\n        flags: 0,\n        metadata: lease.metadata,\n        requestCount: lease.allowedRequests,\n        streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n        ttl: lease.timeToLiveMillis,\n        type: _RSocketFrame.FRAME_TYPES.LEASE,\n      });\n  }\n  _dispose(...disposables) {\n    disposables.forEach(d => {\n      if (d) {\n        d.dispose();\n      }\n    });\n  }\n  _isRequest(frameType) {\n    switch (frameType) {\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n  /**\nandle the connection closing normally: this is an error for any open streams.\nnandle the transport connection closing abnormally or a connection-level protocol error.\nhandleConnectionError(\n    error\n  ) {\n    this._handleError(error);\n    this._connection.close();\n  }\n  /**\nandle a frame received from the transport client.\nnandle connection frames (stream id === 0).\nhandleConnectionFrame(\n    frame\n  ) {\n    switch (frame.type) {\n      case _RSocketFrame.FRAME_TYPES.ERROR:\n        const error = (0, _RSocketFrame.createErrorFromFrame)(frame);\n        this._handleConnectionError(error);\n        break;\n      case _RSocketFrame.FRAME_TYPES.EXT: // Extensions are not supported\n        break;\n      case _RSocketFrame.FRAME_TYPES.KEEPALIVE:\n        if ((0, _RSocketFrame.isRespond)(frame.flags)) {\n          this._connection.sendOne(\n            Object.assign({}, frame, {\n              flags: frame.flags ^ _RSocketFrame.FLAGS.RESPOND, // eslint-disable-line no-bitwise\n              lastReceivedPosition: 0,\n            })\n          );\n        }\n        break;\n      case _RSocketFrame.FRAME_TYPES.LEASE:\n        const r = this._requesterLeaseHandler;\n        if (r) {\n          r.receive(frame);\n        }\n        break;\n      case _RSocketFrame.FRAME_TYPES.METADATA_PUSH:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n        // TODO #18064706: handle requests from server\n        break;\n      case _RSocketFrame.FRAME_TYPES.RESERVED:\n        // No-op\n        break;\n      case _RSocketFrame.FRAME_TYPES.RESUME:\n      case _RSocketFrame.FRAME_TYPES.RESUME_OK:\n        // TODO #18065016: support resumption\n        break;\n      default:\n        if (false) {\n          console.log(\n            'RSocketClient: Unsupported frame type `%s` on stream `%s`.',\n            (0, _RSocketFrame.getFrameTypeName)(frame.type),\n            _RSocketFrame.CONNECTION_STREAM_ID\n          );\n        }\n        break;\n    }\n  }\n\n  /**\n     * Handle stream-specific frames (stream id !== 0).\n     */\n  _handleStreamFrame(streamId, frame) {\n    if (this._isRequest(frame.type)) {\n      const leaseError = this._useLeaseOrError(this._responderLeaseHandler);\n      if (leaseError) {\n        this._sendStreamError(streamId, leaseError);\n        return;\n      }\n    }\n    switch (frame.type) {\n      case _RSocketFrame.FRAME_TYPES.CANCEL:\n        this._handleCancel(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_N:\n        this._handleRequestN(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n        this._handleFireAndForget(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n        this._handleRequestResponse(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n        this._handleRequestStream(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n        this._handleRequestChannel(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.ERROR:\n        const error = (0, _RSocketFrame.createErrorFromFrame)(frame);\n        this._handleStreamError(streamId, error);\n        break;\n      case _RSocketFrame.FRAME_TYPES.PAYLOAD:\n        const receiver = this._receivers.get(streamId);\n        if (receiver != null) {\n          if ((0, _RSocketFrame.isNext)(frame.flags)) {\n            const payload = {\n              data: this._serializers.data.deserialize(frame.data),\n              metadata: this._serializers.metadata.deserialize(frame.metadata),\n            };\n\n            receiver.onNext(payload);\n          }\n          if ((0, _RSocketFrame.isComplete)(frame.flags)) {\n            this._receivers.delete(streamId);\n            receiver.onComplete();\n          }\n        }\n        break;\n      default:\n        if (false) {\n          console.log(\n            'RSocketClient: Unsupported frame type `%s` on stream `%s`.',\n            (0, _RSocketFrame.getFrameTypeName)(frame.type),\n            streamId\n          );\n        }\n        break;\n    }\n  }\n\n  _handleCancel(streamId, frame) {\n    const subscription = this._subscriptions.get(streamId);\n    if (subscription) {\n      subscription.cancel();\n      this._subscriptions.delete(streamId);\n    }\n  }\n\n  _handleRequestN(streamId, frame) {\n    const subscription = this._subscriptions.get(streamId);\n    if (subscription) {\n      subscription.request(frame.requestN);\n    }\n  }\n\n  _handleFireAndForget(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.fireAndForget(payload);\n  }\n\n  _handleRequestResponse(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.requestResponse(payload).subscribe({\n      onComplete: payload => {\n        this._sendStreamPayload(streamId, payload, true);\n      },\n      onError: error => this._sendStreamError(streamId, error.message),\n      onSubscribe: cancel => {\n        const subscription = {\n          cancel,\n          request: _emptyFunction2.default,\n        };\n\n        this._subscriptions.set(streamId, subscription);\n      },\n    });\n  }\n\n  _handleRequestStream(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.requestStream(payload).subscribe({\n      onComplete: () => this._sendStreamComplete(streamId),\n      onError: error => this._sendStreamError(streamId, error.message),\n      onNext: payload => this._sendStreamPayload(streamId, payload),\n      onSubscribe: subscription => {\n        this._subscriptions.set(streamId, subscription);\n        subscription.request(frame.requestN);\n      },\n    });\n  }\n\n  _handleRequestChannel(streamId, frame) {\n    const existingSubscription = this._subscriptions.get(streamId);\n    if (existingSubscription) {\n      //Likely a duplicate REQUEST_CHANNEL frame, ignore per spec\n      return;\n    }\n\n    const payloads = new _rsocketFlowable.Flowable(\n      subscriber => {\n        let firstRequest = true;\n\n        subscriber.onSubscribe({\n          cancel: () => {\n            this._receivers.delete(streamId);\n            const cancelFrame = {\n              flags: 0,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.CANCEL,\n            };\n\n            this._connection.sendOne(cancelFrame);\n          },\n          request: n => {\n            if (n > _RSocketFrame.MAX_REQUEST_N) {\n              n = _RSocketFrame.MAX_REQUEST_N;\n            }\n            if (firstRequest) {\n              n--;\n            }\n\n            if (n > 0) {\n              const requestNFrame = {\n                flags: 0,\n                requestN: n,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n              };\n\n              this._connection.sendOne(requestNFrame);\n            }\n            //critically, if n is 0 now, that's okay because we eagerly decremented it\n            if (firstRequest && n >= 0) {\n              firstRequest = false;\n              //release the initial frame we received in frame form due to map operator\n              subscriber.onNext(frame);\n            }\n          },\n        });\n      },\n      _RSocketFrame.MAX_REQUEST_N\n    );\n\n    const framesToPayloads = new _rsocketFlowable.FlowableProcessor(\n      payloads,\n      frame => this._deserializePayload(frame)\n    );\n    this._receivers.set(streamId, framesToPayloads);\n\n    this._requestHandler.requestChannel(framesToPayloads).subscribe({\n      onComplete: () => this._sendStreamComplete(streamId),\n      onError: error => this._sendStreamError(streamId, error.message),\n      onNext: payload => this._sendStreamPayload(streamId, payload),\n      onSubscribe: subscription => {\n        this._subscriptions.set(streamId, subscription);\n        subscription.request(frame.requestN);\n      },\n    });\n  }\n\n  _sendStreamComplete(streamId) {\n    this._subscriptions.delete(streamId);\n    this._connection.sendOne({\n      data: null,\n      flags: _RSocketFrame.FLAGS.COMPLETE,\n      metadata: null,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n    });\n  }\n\n  _sendStreamError(streamId, errorMessage) {\n    this._subscriptions.delete(streamId);\n    this._connection.sendOne({\n      code: _RSocketFrame.ERROR_CODES.APPLICATION_ERROR,\n      flags: 0,\n      message: errorMessage,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.ERROR,\n    });\n  }\n\n  _sendStreamPayload(streamId, payload, complete = false) {\n    let flags = _RSocketFrame.FLAGS.NEXT;\n    if (complete) {\n      // eslint-disable-next-line no-bitwise\n      flags |= _RSocketFrame.FLAGS.COMPLETE;\n      this._subscriptions.delete(streamId);\n    }\n    const data = this._serializers.data.serialize(payload.data);\n    const metadata = this._serializers.metadata.serialize(payload.metadata);\n    this._connection.sendOne({\n      data,\n      flags,\n      metadata,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n    });\n  }\n\n  _deserializePayload(frame) {\n    return deserializePayload(this._serializers, frame);\n  }\n\n  /**\n     * Handle an error specific to a stream.\n     */\n  _handleStreamError(streamId, error) {\n    const receiver = this._receivers.get(streamId);\n    if (receiver != null) {\n      this._receivers.delete(streamId);\n      receiver.onError(error);\n    }\n  }\n}\n\nfunction deserializePayload(serializers, frame) {\n  return {\n    data: serializers.data.deserialize(frame.data),\n    metadata: serializers.metadata.deserialize(frame.metadata),\n  };\n}\n"},"lineCount":801}},"error":null,"hash":"bb072e5ebd8151e76f516d7e0dcf5eb3","cacheData":{"env":{}}}
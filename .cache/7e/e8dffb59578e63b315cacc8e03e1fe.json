{"id":"node_modules/rsocket-core/build/RSocketBufferUtils.js","dependencies":[{"name":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/package.json","includedInParent":true,"mtime":1605625582835},{"name":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/package.json","includedInParent":true,"mtime":1593079698672},{"name":"./LiteBuffer","loc":{"line":30,"column":26},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketBufferUtils.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/LiteBuffer.js"},{"name":"fbjs/lib/invariant","loc":{"line":31,"column":25},"parent":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/rsocket-core/build/RSocketBufferUtils.js","resolved":"/Users/dmytrohryshchenko/projects/scalecube-memory-leak/node_modules/fbjs/lib/invariant.js"}],"generated":{"js":"/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * \n */\n\n'use strict';\n\n/* eslint-disable no-bitwise */ Object.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.createBuffer = undefined;\nexports.readUInt24BE = readUInt24BE;\nexports.writeUInt24BE = writeUInt24BE;\nexports.readUInt64BE = readUInt64BE;\nexports.writeUInt64BE = writeUInt64BE;\nexports.byteLength = byteLength;\nexports.toBuffer = toBuffer;\nvar _LiteBuffer = require('./LiteBuffer');\nvar _invariant = require('fbjs/lib/invariant');\nvar _invariant2 = _interopRequireDefault(_invariant);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n                                                                                                                                                                                                                                                                 * Mimimum value that would overflow bitwise operators (2^32).\n                                                                                                                                                                                                                                                                 */ const BITWISE_OVERFLOW = 0x100000000;\n/**\n                                                                                                                                                                                                                                                                                                          * Read a uint24 from a buffer starting at the given offset.\n                                                                                                                                                                                                                                                                                                          */ function readUInt24BE(\n  buffer,\n  offset\n) {\n  const val1 = buffer.readUInt8(offset) << 16;\n  const val2 = buffer.readUInt8(offset + 1) << 8;\n  const val3 = buffer.readUInt8(offset + 2);\n  return val1 | val2 | val3;\n}\n/**\nrites a uint24 to a buffer starting at the given offset, returning the\noffset of the next byte.\nfunction writeUInt24BE(\n  buffer,\n  value,\n  offset\n) {\n  offset = buffer.writeUInt8(value >>> 16, offset); // 3rd byte\n  offset = buffer.writeUInt8(value >>> 8 & 0xff, offset); // 2nd byte\n  return buffer.writeUInt8(value & 0xff, offset); // 1st byte\n}\n/**\n   * Read a uint64 (technically supports up to 53 bits per JS number\n   * representation).\n   */ function readUInt64BE(\n  buffer,\n  offset\n) {\n  const high = buffer.readUInt32BE(offset);\n  const low = buffer.readUInt32BE(offset + 4);\n  return high * BITWISE_OVERFLOW + low;\n}\n/**\n                                                                                                                                                                         * Write a uint64 (technically supports up to 53 bits per JS number\n                                                                                                                                                                         * representation).\n                                                                                                                                                                         */ function writeUInt64BE(\n  buffer,\n  value,\n  offset\n) {\n  const high = value / BITWISE_OVERFLOW | 0;\n  const low = value % BITWISE_OVERFLOW;\n  offset = buffer.writeUInt32BE(high, offset); // first half of uint64\n  return buffer.writeUInt32BE(low, offset); // second half of uint64\n}\n/**\n   * Determine the number of bytes it would take to encode the given data with the\n   * given encoding.\n   */ function byteLength(\n  data,\n  encoding\n) {\n  if (data == null) {\n    return 0;\n  }\n  return _LiteBuffer.LiteBuffer.byteLength(data, encoding);\n}\n/**\n                                                                                                                                   * Attempts to construct a buffer from the input, throws if invalid.\n                                                                                                                                   */ function toBuffer(\n  data\n) {\n  // Buffer.from(buffer) copies which we don't want here\n  if (data instanceof _LiteBuffer.LiteBuffer) {\n    return data;\n  }\n  (0, _invariant2.default)(\n    data instanceof ArrayBuffer,\n    'RSocketBufferUtils: Cannot construct buffer. Expected data to be an ' +\n      'arraybuffer, got `%s`.',\n    data\n  );\n  return _LiteBuffer.LiteBuffer.from(data);\n}\n/**\n                                                                                                                                                                                                                                                                       * Function to create a buffer of a given sized filled with zeros.\n                                                                                                                                                                                                                                                                       */ const createBuffer = (exports.createBuffer = typeof _LiteBuffer.LiteBuffer.alloc ===\n  'function'\n  ? length => _LiteBuffer.LiteBuffer.alloc(length) // $FlowFixMe\n  : length => new _LiteBuffer.LiteBuffer(length).fill(0));\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rsocket-core/build/RSocketBufferUtils.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}}],"sources":{"node_modules/rsocket-core/build/RSocketBufferUtils.js":"/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * \n */\n\n'use strict';\n\n/* eslint-disable no-bitwise */ Object.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.createBuffer = undefined;\nexports.readUInt24BE = readUInt24BE;\nexports.writeUInt24BE = writeUInt24BE;\nexports.readUInt64BE = readUInt64BE;\nexports.writeUInt64BE = writeUInt64BE;\nexports.byteLength = byteLength;\nexports.toBuffer = toBuffer;\nvar _LiteBuffer = require('./LiteBuffer');\nvar _invariant = require('fbjs/lib/invariant');\nvar _invariant2 = _interopRequireDefault(_invariant);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n                                                                                                                                                                                                                                                                 * Mimimum value that would overflow bitwise operators (2^32).\n                                                                                                                                                                                                                                                                 */ const BITWISE_OVERFLOW = 0x100000000;\n/**\n                                                                                                                                                                                                                                                                                                          * Read a uint24 from a buffer starting at the given offset.\n                                                                                                                                                                                                                                                                                                          */ function readUInt24BE(\n  buffer,\n  offset\n) {\n  const val1 = buffer.readUInt8(offset) << 16;\n  const val2 = buffer.readUInt8(offset + 1) << 8;\n  const val3 = buffer.readUInt8(offset + 2);\n  return val1 | val2 | val3;\n}\n/**\nrites a uint24 to a buffer starting at the given offset, returning the\noffset of the next byte.\nfunction writeUInt24BE(\n  buffer,\n  value,\n  offset\n) {\n  offset = buffer.writeUInt8(value >>> 16, offset); // 3rd byte\n  offset = buffer.writeUInt8(value >>> 8 & 0xff, offset); // 2nd byte\n  return buffer.writeUInt8(value & 0xff, offset); // 1st byte\n}\n/**\n   * Read a uint64 (technically supports up to 53 bits per JS number\n   * representation).\n   */ function readUInt64BE(\n  buffer,\n  offset\n) {\n  const high = buffer.readUInt32BE(offset);\n  const low = buffer.readUInt32BE(offset + 4);\n  return high * BITWISE_OVERFLOW + low;\n}\n/**\n                                                                                                                                                                         * Write a uint64 (technically supports up to 53 bits per JS number\n                                                                                                                                                                         * representation).\n                                                                                                                                                                         */ function writeUInt64BE(\n  buffer,\n  value,\n  offset\n) {\n  const high = value / BITWISE_OVERFLOW | 0;\n  const low = value % BITWISE_OVERFLOW;\n  offset = buffer.writeUInt32BE(high, offset); // first half of uint64\n  return buffer.writeUInt32BE(low, offset); // second half of uint64\n}\n/**\n   * Determine the number of bytes it would take to encode the given data with the\n   * given encoding.\n   */ function byteLength(\n  data,\n  encoding\n) {\n  if (data == null) {\n    return 0;\n  }\n  return _LiteBuffer.LiteBuffer.byteLength(data, encoding);\n}\n/**\n                                                                                                                                   * Attempts to construct a buffer from the input, throws if invalid.\n                                                                                                                                   */ function toBuffer(\n  data\n) {\n  // Buffer.from(buffer) copies which we don't want here\n  if (data instanceof _LiteBuffer.LiteBuffer) {\n    return data;\n  }\n  (0, _invariant2.default)(\n    data instanceof ArrayBuffer,\n    'RSocketBufferUtils: Cannot construct buffer. Expected data to be an ' +\n      'arraybuffer, got `%s`.',\n    data\n  );\n  return _LiteBuffer.LiteBuffer.from(data);\n}\n/**\n                                                                                                                                                                                                                                                                       * Function to create a buffer of a given sized filled with zeros.\n                                                                                                                                                                                                                                                                       */ const createBuffer = (exports.createBuffer = typeof _LiteBuffer.LiteBuffer.alloc ===\n  'function'\n  ? length => _LiteBuffer.LiteBuffer.alloc(length) // $FlowFixMe\n  : length => new _LiteBuffer.LiteBuffer(length).fill(0));\n"},"lineCount":121}},"error":null,"hash":"72ee36c234ffeae21db6181529fa6ffe","cacheData":{"env":{}}}